#!/usr/bin/python3
"""
Get the status of the API.
"""

from flask_cors import CORS
from flask import Flask, jsonify
from models import storage
from api.v1.views import app_views
import os

app = Flask(__name__)

app.register_blueprint(app_views, url_prefix='/api/v1')

CORS(app, resources={r"/*": {"origins": "0.0.0.0"}})


@app.teardown_appcontext
def teardown_storage(exception):
    """Close the storage when the app context ends"""
    storage.close()


@app.errorhandler(404)
def not_found(error):
    """Returns a JSON-formatted 404 status code response."""
    return jsonify({"error": "Not found"}), 404


if __name__ == '__main__':
    (myenv) vagrant@ubuntu-focal:~/AirBnB_clone_v3$ cat api/v1/app.py
    #!/usr/bin/python3
    """
Get the status of the API.
"""

    from flask_cors import CORS
    from flask import Flask, jsonify
    from models import storage
    from api.v1.views import app_views
    import os

    app = Flask(__name__)

    app.register_blueprint(app_views, url_prefix='/api/v1')

    CORS(app, resources={r"/*": {"origins": "0.0.0.0"}})


    @app.teardown_appcontext
    def teardown_storage(exception):
            """Close the storage when the app context ends"""
                storage.close()


                @app.errorhandler(404)
                def not_found(error):
                        """Returns a JSON-formatted 404 status code response."""
                            return jsonify({"error": "Not found"}), 404


                        if __name__ == '__main__':
                                host = os.getenv('HBNB_API_HOST', '0.0.0.0')
                                    port = int(os.getenv('HBNB_API_PORT', 5000))
                                        app.run(host=host, port=port, debug=True, threaded=True)
                                        (myenv) vagrant@ubuntu-focal:~/AirBnB_clone_v3$ cat api/v1/views/cities.py
                                        #!/usr/bin/python3
                                        """Handles RESTful API actions for City objects."""
                                        from flask import jsonify, abort, request
                                        from models import storage
                                        from . import app_views
                                        from models.state import State
                                        from models.city import City


                                        @app_views.route(
                                                '/states/<state_id>/cities', strict_slashes=False, methods=['GET'])
                                        def get_cities_by_state(state_id):
                                                """Retrieves the list of all City objects of a State."""
                                                    state = storage.get(State, state_id)
                                                        if not state:
                                                                    abort(404)
                                                                        cities = [city.to_dict() for city in state.cities]
                                                                            return jsonify(cities)


                                                                        @app_views.route(
                                                                                '/cities/<city_id>', strict_slashes=False, methods=['GET'])
                                                                        def get_city(city_id):
                                                                                """Retrieves a specific City object."""
                                                                                    city = storage.get(City, city_id)
                                                                                        if not city:
                                                                                                    abort(404)
                                                                                                        return jsonify(city.to_dict())


                                                                                                    @app_views.route(
                                                                                                            '/cities/<city_id>', strict_slashes=False, methods=['DELETE'])
                                                                                                    def delete_city(city_id):
                                                                                                            """Deletes a City object."""
                                                                                                                city = storage.get(City, city_id)
                                                                                                                    if not city:
                                                                                                                                abort(404)
                                                                                                                                    storage.delete(city)
                                                                                                                                        storage.save()
                                                                                                                                            return jsonify({}), 200


                                                                                                                                        @app_views.route(
                                                                                                                                                '/states/<state_id>/cities', strict_slashes=False, methods=['POST'])
                                                                                                                                        def create_city(state_id):
                                                                                                                                                """Creates a City object."""
                                                                                                                                                    state = storage.get(State, state_id)
                                                                                                                                                        if not state:
                                                                                                                                                                    abort(404)
                                                                                                                                                                        req_data = request.get_json()
                                                                                                                                                                            if not req_data:
                                                                                                                                                                                        abort(400, 'Not a JSON')
                                                                                                                                                                                            if 'name' not in req_data:
                                                                                                                                                                                                        abort(400, 'Missing name')
                                                                                                                                                                                                            new_city = City(**req_data)
                                                                                                                                                                                                                new_city.state_id = state_id
                                                                                                                                                                                                                    storage.new(new_city)
                                                                                                                                                                                                                        storage.save()
                                                                                                                                                                                                                            return jsonify(new_city.to_dict()), 201


                                                                                                                                                                                                                        @app_views.route(
                                                                                                                                                                                                                                '/cities/<city_id>', strict_slashes=False, methods=['PUT'])
                                                                                                                                                                                                                        def update_city(city_id):
                                                                                                                                                                                                                                """Updates a City object."""
                                                                                                                                                                                                                                    city = storage.get(City, city_id)
                                                                                                                                                                                                                                        if not city:
                                                                                                                                                                                                                                                    abort(404)
                                                                                                                                                                                                                                                        req_data = request.get_json()
                                                                                                                                                                                                                                                            if not req_data:
                                                                                                                                                                                                                                                                        abort(400, 'Not a JSON')
                                                                                                                                                                                                                                                                            ignore_keys = ['id', 'state_id', 'created_at', 'updated_at']
                                                                                                                                                                                                                                                                                for key, value in req_data.items():
                                                                                                                                                                                                                                                                                            if key not in ignore_keys:
                                                                                                                                                                                                                                                                                                            setattr(city, key, value)
                                                                                                                                                                                                                                                                                                                storage.save()
                                                                                                                                                                                                                                                                                                                    return jsonify(city.to_dict()), 200
                                                                                                                                                                                                                                                                                                                (myenv) vagrant@ubuntu-focal:~/AirBnB_clone_v3$                                                                                                                                                                                
    host = os.getenv('HBNB_API_HOST', '0.0.0.0')
    port = int(os.getenv('HBNB_API_PORT', 5000))
    app.run(host=host, port=port, debug=True, threaded=True)
